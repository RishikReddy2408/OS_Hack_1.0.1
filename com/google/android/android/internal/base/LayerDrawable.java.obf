package com.google.android.gms.internal.base;

import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.Callback;
import android.graphics.drawable.Drawable.ConstantState;
import android.os.SystemClock;

public final class zae
  extends Drawable
  implements Drawable.Callback
{
  private int mAlpha = 0;
  private int mFrom;
  private boolean zamy = true;
  private int zang = 0;
  private long zanh;
  private int zani;
  private int zanj = 255;
  private int zank;
  private boolean zanl;
  private zai zanm;
  private Drawable zann;
  private Drawable zano;
  private boolean zanp;
  private boolean zanq;
  private boolean zanr;
  private int zans;
  
  public zae(Drawable paramDrawable1, Drawable paramDrawable2)
  {
    this(null);
    Object localObject = paramDrawable1;
    if (paramDrawable1 == null) {
      localObject = zag.zacg();
    }
    zann = ((Drawable)localObject);
    ((Drawable)localObject).setCallback(this);
    paramDrawable1 = zanm;
    int i = zanv;
    zanv = (((Drawable)localObject).getChangingConfigurations() | i);
    paramDrawable1 = paramDrawable2;
    if (paramDrawable2 == null) {
      paramDrawable1 = zag.zacg();
    }
    zano = paramDrawable1;
    paramDrawable1.setCallback(this);
    paramDrawable2 = zanm;
    i = zanv;
    zanv = (paramDrawable1.getChangingConfigurations() | i);
  }
  
  zae(zai paramZai)
  {
    zanm = new zai(paramZai);
  }
  
  private final boolean canConstantState()
  {
    if (!zanp)
    {
      boolean bool;
      if ((zann.getConstantState() != null) && (zano.getConstantState() != null)) {
        bool = true;
      } else {
        bool = false;
      }
      zanq = bool;
      zanp = true;
    }
    return zanq;
  }
  
  public final void draw(Canvas paramCanvas)
  {
    int k = zang;
    int i = 1;
    int j = 1;
    switch (k)
    {
    default: 
      break;
    case 2: 
      if (zanh >= 0L)
      {
        float f = (float)(SystemClock.uptimeMillis() - zanh) / zank;
        if (f >= 1.0F) {
          i = j;
        } else {
          i = 0;
        }
        if (i != 0) {
          zang = 0;
        }
        f = Math.min(f, 1.0F);
        mAlpha = ((int)(zani * f + 0.0F));
      }
      break;
    case 1: 
      zanh = SystemClock.uptimeMillis();
      zang = 2;
      i = 0;
    }
    j = mAlpha;
    boolean bool = zamy;
    Drawable localDrawable1 = zann;
    Drawable localDrawable2 = zano;
    if (i != 0)
    {
      if ((!bool) || (j == 0)) {
        localDrawable1.draw(paramCanvas);
      }
      if (j == zanj)
      {
        localDrawable2.setAlpha(zanj);
        localDrawable2.draw(paramCanvas);
      }
      return;
    }
    if (bool) {
      localDrawable1.setAlpha(zanj - j);
    }
    localDrawable1.draw(paramCanvas);
    if (bool) {
      localDrawable1.setAlpha(zanj);
    }
    if (j > 0)
    {
      localDrawable2.setAlpha(j);
      localDrawable2.draw(paramCanvas);
      localDrawable2.setAlpha(zanj);
    }
    invalidateSelf();
  }
  
  public final int getChangingConfigurations()
  {
    return super.getChangingConfigurations() | zanm.mChangingConfigurations | zanm.zanv;
  }
  
  public final Drawable.ConstantState getConstantState()
  {
    if (canConstantState())
    {
      zanm.mChangingConfigurations = getChangingConfigurations();
      return zanm;
    }
    return null;
  }
  
  public final int getIntrinsicHeight()
  {
    return Math.max(zann.getIntrinsicHeight(), zano.getIntrinsicHeight());
  }
  
  public final int getIntrinsicWidth()
  {
    return Math.max(zann.getIntrinsicWidth(), zano.getIntrinsicWidth());
  }
  
  public final int getOpacity()
  {
    if (!zanr)
    {
      zans = Drawable.resolveOpacity(zann.getOpacity(), zano.getOpacity());
      zanr = true;
    }
    return zans;
  }
  
  public final void invalidateDrawable(Drawable paramDrawable)
  {
    paramDrawable = getCallback();
    if (paramDrawable != null) {
      paramDrawable.invalidateDrawable(this);
    }
  }
  
  public final Drawable mutate()
  {
    if ((!zanl) && (super.mutate() == this))
    {
      if (canConstantState())
      {
        zann.mutate();
        zano.mutate();
        zanl = true;
        return this;
      }
      throw new IllegalStateException("One or more children of this LayerDrawable does not have constant state; this drawable cannot be mutated.");
    }
    return this;
  }
  
  protected final void onBoundsChange(Rect paramRect)
  {
    zann.setBounds(paramRect);
    zano.setBounds(paramRect);
  }
  
  public final void scheduleDrawable(Drawable paramDrawable, Runnable paramRunnable, long paramLong)
  {
    paramDrawable = getCallback();
    if (paramDrawable != null) {
      paramDrawable.scheduleDrawable(this, paramRunnable, paramLong);
    }
  }
  
  public final void setAlpha(int paramInt)
  {
    if (mAlpha == zanj) {
      mAlpha = paramInt;
    }
    zanj = paramInt;
    invalidateSelf();
  }
  
  public final void setColorFilter(ColorFilter paramColorFilter)
  {
    zann.setColorFilter(paramColorFilter);
    zano.setColorFilter(paramColorFilter);
  }
  
  public final void startTransition(int paramInt)
  {
    mFrom = 0;
    zani = zanj;
    mAlpha = 0;
    zank = 250;
    zang = 1;
    invalidateSelf();
  }
  
  public final void unscheduleDrawable(Drawable paramDrawable, Runnable paramRunnable)
  {
    paramDrawable = getCallback();
    if (paramDrawable != null) {
      paramDrawable.unscheduleDrawable(this, paramRunnable);
    }
  }
  
  public final Drawable zacf()
  {
    return zano;
  }
}
