package com.google.firebase.components;

import android.content.Context;
import android.support.annotation.VisibleForTesting;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Preconditions;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@KeepForSdk
public final class Component<T>
{
  private final Set<Class<? super T>> zza;
  private final Set<Dependency> zzb;
  private final int zzc;
  private final ComponentFactory<T> zzd;
  private final Set<Class<?>> zze;
  
  private Component(Set<Class<? super T>> paramSet, Set<Dependency> paramSet1, int paramInt, ComponentFactory<T> paramComponentFactory, Set<Class<?>> paramSet2)
  {
    zza = Collections.unmodifiableSet(paramSet);
    zzb = Collections.unmodifiableSet(paramSet1);
    zzc = paramInt;
    zzd = paramComponentFactory;
    zze = Collections.unmodifiableSet(paramSet2);
  }
  
  @KeepForSdk
  public static <T> Builder<T> builder(Class<T> paramClass)
  {
    return new Builder(paramClass, new Class[0], (byte)0);
  }
  
  @KeepForSdk
  public static <T> Builder<T> builder(Class<T> paramClass, Class<? super T>... paramVarArgs)
  {
    return new Builder(paramClass, paramVarArgs, (byte)0);
  }
  
  @Deprecated
  @KeepForSdk
  public static <T> Component<T> of(Class<T> paramClass, T paramT)
  {
    return builder(paramClass).factory(zzb.zza(paramT)).build();
  }
  
  @SafeVarargs
  @KeepForSdk
  public static <T> Component<T> of(T paramT, Class<T> paramClass, Class<? super T>... paramVarArgs)
  {
    return builder(paramClass, paramVarArgs).factory(zzc.zza(paramT)).build();
  }
  
  public final String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("Component<");
    localStringBuilder.append(Arrays.toString(zza.toArray()));
    localStringBuilder.append(">{");
    localStringBuilder.append(zzc);
    localStringBuilder.append(", deps=");
    localStringBuilder.append(Arrays.toString(zzb.toArray()));
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
  
  public final Set<Class<? super T>> zza()
  {
    return zza;
  }
  
  public final Set<Dependency> zzb()
  {
    return zzb;
  }
  
  public final ComponentFactory<T> zzc()
  {
    return zzd;
  }
  
  public final Set<Class<?>> zzd()
  {
    return zze;
  }
  
  public final boolean zze()
  {
    return zzc == 1;
  }
  
  public final boolean zzf()
  {
    return zzc == 2;
  }
  
  @KeepForSdk
  public static class Builder<T>
  {
    private final Set<Class<? super T>> zza = new HashSet();
    private final Set<Dependency> zzb = new HashSet();
    private int zzc;
    private ComponentFactory<T> zzd;
    private Set<Class<?>> zze;
    
    private Builder(Class<T> paramClass, Class<? super T>... paramVarArgs)
    {
      int i = 0;
      zzc = 0;
      zze = new HashSet();
      Preconditions.checkNotNull(paramClass, "Null interface");
      zza.add(paramClass);
      int j = paramVarArgs.length;
      while (i < j)
      {
        Preconditions.checkNotNull(paramVarArgs[i], "Null interface");
        i += 1;
      }
      Collections.addAll(zza, paramVarArgs);
    }
    
    private Builder<T> zza(int paramInt)
    {
      boolean bool;
      if (zzc == 0) {
        bool = true;
      } else {
        bool = false;
      }
      Preconditions.checkState(bool, "Instantiation type has already been set.");
      zzc = paramInt;
      return this;
    }
    
    @KeepForSdk
    public Builder<T> add(Dependency paramDependency)
    {
      Preconditions.checkNotNull(paramDependency, "Null dependency");
      Class localClass = paramDependency.zza();
      Preconditions.checkArgument(zza.contains(localClass) ^ true, "Components are not allowed to depend on interfaces they themselves provide.");
      zzb.add(paramDependency);
      return this;
    }
    
    @KeepForSdk
    public Builder<T> alwaysEager()
    {
      return zza(1);
    }
    
    @KeepForSdk
    public Component<T> build()
    {
      boolean bool;
      if (zzd != null) {
        bool = true;
      } else {
        bool = false;
      }
      Preconditions.checkState(bool, "Missing required property: factory.");
      return new Component(new HashSet(zza), new HashSet(zzb), zzc, zzd, zze, (byte)0);
    }
    
    @KeepForSdk
    public Builder<T> eagerInDefaultApp()
    {
      return zza(2);
    }
    
    @KeepForSdk
    public Builder<T> factory(ComponentFactory<T> paramComponentFactory)
    {
      zzd = ((ComponentFactory)Preconditions.checkNotNull(paramComponentFactory, "Null factory"));
      return this;
    }
    
    @KeepForSdk
    public Builder<T> publishes(Class<?> paramClass)
    {
      zze.add(paramClass);
      return this;
    }
  }
}
