package com.google.firebase.iid;

import android.content.BroadcastReceiver.PendingResult;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.support.annotation.GuardedBy;
import android.support.annotation.VisibleForTesting;
import android.util.Log;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.concurrent.NamedThreadFactory;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;

public final class zzh
  implements ServiceConnection
{
  private final Queue<zzd> zzaa = new ArrayDeque();
  private zzf zzab;
  @GuardedBy("this")
  private boolean zzac = false;
  private final Context zzx;
  private final Intent zzy;
  private final ScheduledExecutorService zzz;
  
  public zzh(Context paramContext, String paramString)
  {
    this(paramContext, paramString, new ScheduledThreadPoolExecutor(0, new NamedThreadFactory("Firebase-FirebaseInstanceIdServiceConnection")));
  }
  
  @VisibleForTesting
  private zzh(Context paramContext, String paramString, ScheduledExecutorService paramScheduledExecutorService)
  {
    zzx = paramContext.getApplicationContext();
    zzy = new Intent(paramString).setPackage(zzx.getPackageName());
    zzz = paramScheduledExecutorService;
  }
  
  private final void zzc()
  {
    try
    {
      if (Log.isLoggable("EnhancedIntentService", 3)) {
        Log.d("EnhancedIntentService", "flush queue called");
      }
      while (!zzaa.isEmpty())
      {
        if (Log.isLoggable("EnhancedIntentService", 3)) {
          Log.d("EnhancedIntentService", "found intent to be delivered");
        }
        Object localObject1;
        if ((zzab != null) && (zzab.isBinderAlive()))
        {
          if (Log.isLoggable("EnhancedIntentService", 3)) {
            Log.d("EnhancedIntentService", "binder is alive, sending the intent.");
          }
          localObject1 = (zzd)zzaa.poll();
          zzab.zza((zzd)localObject1);
        }
        else
        {
          boolean bool;
          if (Log.isLoggable("EnhancedIntentService", 3))
          {
            bool = zzac;
            localObject1 = new StringBuilder(39);
            ((StringBuilder)localObject1).append("binder is dead. start connection? ");
            ((StringBuilder)localObject1).append(bool ^ true);
            Log.d("EnhancedIntentService", ((StringBuilder)localObject1).toString());
          }
          if (!zzac)
          {
            zzac = true;
            try
            {
              bool = ConnectionTracker.getInstance().bindService(zzx, zzy, this, 65);
              if (bool) {
                return;
              }
              Log.e("EnhancedIntentService", "binding to the service failed");
            }
            catch (SecurityException localSecurityException)
            {
              Log.e("EnhancedIntentService", "Exception while binding the service", localSecurityException);
            }
            zzac = false;
            zzd();
          }
          return;
        }
      }
      return;
    }
    finally {}
  }
  
  @GuardedBy("this")
  private final void zzd()
  {
    while (!zzaa.isEmpty()) {
      ((zzd)zzaa.poll()).finish();
    }
  }
  
  public final void onServiceConnected(ComponentName paramComponentName, IBinder paramIBinder)
  {
    try
    {
      zzac = false;
      zzab = ((zzf)paramIBinder);
      if (Log.isLoggable("EnhancedIntentService", 3))
      {
        paramComponentName = String.valueOf(paramComponentName);
        StringBuilder localStringBuilder = new StringBuilder(String.valueOf(paramComponentName).length() + 20);
        localStringBuilder.append("onServiceConnected: ");
        localStringBuilder.append(paramComponentName);
        Log.d("EnhancedIntentService", localStringBuilder.toString());
      }
      if (paramIBinder == null)
      {
        Log.e("EnhancedIntentService", "Null service connection");
        zzd();
      }
      else
      {
        zzc();
      }
      return;
    }
    finally {}
  }
  
  public final void onServiceDisconnected(ComponentName paramComponentName)
  {
    if (Log.isLoggable("EnhancedIntentService", 3))
    {
      paramComponentName = String.valueOf(paramComponentName);
      StringBuilder localStringBuilder = new StringBuilder(String.valueOf(paramComponentName).length() + 23);
      localStringBuilder.append("onServiceDisconnected: ");
      localStringBuilder.append(paramComponentName);
      Log.d("EnhancedIntentService", localStringBuilder.toString());
    }
    zzc();
  }
  
  public final void zza(Intent paramIntent, BroadcastReceiver.PendingResult paramPendingResult)
  {
    try
    {
      if (Log.isLoggable("EnhancedIntentService", 3)) {
        Log.d("EnhancedIntentService", "new intent queued in the bind-strategy delivery");
      }
      zzaa.add(new zzd(paramIntent, paramPendingResult, zzz));
      zzc();
      return;
    }
    finally {}
  }
}
